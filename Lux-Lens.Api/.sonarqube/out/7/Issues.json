{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.7.0.0",
        "fileVersion": "4.7.0-3.23366.1 (dad7898a)",
        "semanticVersion": "4.7.0",
        "language": "es-MX"
      },
      "results": [
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 21
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 23,
                  "endLine": 32,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 35,
                  "endLine": 32,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 21
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 23,
                  "endLine": 36,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 29,
                  "endLine": 36,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 35,
                  "endLine": 36,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 41,
                  "endLine": 36,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 47,
                  "endLine": 36,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 53,
                  "endLine": 36,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 59,
                  "endLine": 36,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Desreferencia de una referencia posiblemente NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 34,
                  "endLine": 72,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_LensServiceMock\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "endLine": 19,
                  "endColumn": 52
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "endLine": 19,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_LensController\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "endLine": 20,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "endLine": 20,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Desreferencia de una referencia posiblemente NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 34,
                  "endLine": 97,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Desreferencia de una referencia posiblemente NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 133,
                  "startColumn": 34,
                  "endLine": 133,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_userServiceMock\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "endLine": 19,
                  "endColumn": 52
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "endLine": 19,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_roleManagerMock\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "endLine": 20,
                  "endColumn": 65
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 49,
                  "endLine": 20,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_userManagerMock\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "endLine": 21,
                  "endColumn": 65
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 49,
                  "endLine": 21,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_userController\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 32,
                  "endLine": 24,
                  "endColumn": 47
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 32,
                  "endLine": 24,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 47,
                  "startColumn": 13,
                  "endLine": 47,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 48,
                  "startColumn": 13,
                  "endLine": 48,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2018",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.NotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 100,
                  "startColumn": 13,
                  "endLine": 100,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "NotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2018",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.NotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 13,
                  "endLine": 137,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "NotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 13,
                  "endLine": 72,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 95,
                  "startColumn": 13,
                  "endLine": 95,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 13,
                  "endLine": 97,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 13,
                  "endLine": 137,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2045",
          "level": "note",
          "message": "Call independent Assert statements from inside an Assert.Multiple",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/LensTest.cs",
                "region": {
                  "startLine": 100,
                  "startColumn": 13,
                  "endLine": 100,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 131,
                  "startColumn": 13,
                  "endLine": 131,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/Documentos/GitHub/AppLux-Lens/Lux-Lens.Api/Lux-Lens.UnitTest/AuthTest.cs",
                "region": {
                  "startLine": 133,
                  "startColumn": 13,
                  "endLine": 133,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        }
      ],
      "rules": {
        "CS8602": {
          "id": "CS8602",
          "shortDescription": "Desreferencia de una referencia posiblemente NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8602)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Un campo que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declararlo como que admite un valor NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8625": {
          "id": "CS8625",
          "shortDescription": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8625)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2003": {
          "id": "NUnit2003",
          "shortDescription": "Consider using Assert.That(expr, Is.True) instead of Assert.IsTrue(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2003.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2005": {
          "id": "NUnit2005",
          "shortDescription": "Consider using Assert.That(actual, Is.EqualTo(expected)) instead of Assert.AreEqual(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual).",
          "defaultLevel": "warning",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2005.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2018": {
          "id": "NUnit2018",
          "shortDescription": "Consider using Assert.That(expr, Is.Not.Null) instead of Assert.NotNull(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.NotNull(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2018.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2019": {
          "id": "NUnit2019",
          "shortDescription": "Consider using Assert.That(expr, Is.Not.Null) instead of Assert.IsNotNull(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2019.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2038": {
          "id": "NUnit2038",
          "shortDescription": "Consider using Assert.That(actual, Is.InstanceOf(expected)) instead of Assert.IsInstanceOf(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2038.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2045": {
          "id": "NUnit2045",
          "shortDescription": "Use Assert.Multiple",
          "fullDescription": "Hosting Asserts inside an Assert.Multiple allows detecting more than one failure.",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2045.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}