õ
XE:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\Controllers\LensController.cs
	namespace 	
Lux_Lens
 
. 
Web 
. 
Controllers "
{ 
[		 
ApiController		 
]		 
[

 
Route

 

(


 
$str

 
)

 
]

 
public 

class 
LensController 
:  !
ControllerBase" 0
{ 
private 
readonly 
IHttpClientFactory +
_httpClientFactory, >
;> ?
public 
LensController 
( 
IHttpClientFactory 0
httpClientFactory1 B
)B C
{ 	
_httpClientFactory 
=  
httpClientFactory! 2
;2 3
} 	
[ 	
HttpGet	 
] 
public 
async 
Task 
< 
IActionResult '
>' (
GetAllAsync) 4
(4 5
)5 6
{ 	
var 

httpClient 
= 
_httpClientFactory /
./ 0
CreateClient0 <
(< =
)= >
;> ?
HttpResponseMessage 
response  (
=) *
await+ 0

httpClient1 ;
.; <
GetAsync< D
(D E
$strE n
)n o
;o p
if 
( 
response 
. 
IsSuccessStatusCode +
)+ ,
{ 
var 
contentStream !
=" #
await$ )
response* 2
.2 3
Content3 :
.: ;
ReadAsStreamAsync; L
(L M
)M N
;N O
var 
options 
= 
new !!
JsonSerializerOptions" 7
{   '
PropertyNameCaseInsensitive!! /
=!!0 1
true!!2 6
,!!6 7
}"" 
;"" 
var$$ 
items$$ 
=$$ 
await$$ !
JsonSerializer$$" 0
.$$0 1
DeserializeAsync$$1 A
<$$A B
List$$B F
<$$F G
LensViewModel$$G T
>$$T U
>$$U V
($$V W
contentStream$$W d
,$$d e
options$$f m
)$$m n
;$$n o
return&& 
Ok&& 
(&& 
items&& 
)&&  
;&&  !
}'' 
else(( 
{)) 
Console** 
.** 
	WriteLine** !
(**! "
$str**" 5
)**5 6
;**6 7
return++ 

StatusCode++ !
(++! "
(++" #
int++# &
)++& '
response++' /
.++/ 0

StatusCode++0 :
,++: ;
response++< D
.++D E
ReasonPhrase++E Q
)++Q R
;++R S
},, 
}-- 	
}.. 
}// â
cE:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\Controllers\WeatherForecastController.cs
	namespace 	
Lux_Lens
 
. 
Web 
. 
Controllers "
{ 
[ 
ApiController 
] 
[ 
Route 

(
 
$str 
) 
] 
public 

class %
WeatherForecastController *
:+ ,
ControllerBase- ;
{ 
private		 
static		 
readonly		 
string		  &
[		& '
]		' (
	Summaries		) 2
=		3 4
new		5 8
[		8 9
]		9 :
{

 	
$str 
, 
$str 
, 
$str '
,' (
$str) /
,/ 0
$str1 7
,7 8
$str9 ?
,? @
$strA H
,H I
$strJ O
,O P
$strQ ]
,] ^
$str_ j
} 
; 
private 
readonly 
ILogger  
<  !%
WeatherForecastController! :
>: ;
_logger< C
;C D
public %
WeatherForecastController (
(( )
ILogger) 0
<0 1%
WeatherForecastController1 J
>J K
loggerL R
)R S
{ 	
_logger 
= 
logger 
; 
} 	
[ 	
HttpGet	 
] 
public 
IEnumerable 
< 
WeatherForecast *
>* +
Get, /
(/ 0
)0 1
{ 	
return 

Enumerable 
. 
Range #
(# $
$num$ %
,% &
$num' (
)( )
.) *
Select* 0
(0 1
index1 6
=>7 9
new: =
WeatherForecast> M
{ 
Date 
= 
DateTime 
.  
Now  #
.# $
AddDays$ +
(+ ,
index, 1
)1 2
,2 3
TemperatureC 
= 
Random %
.% &
Shared& ,
., -
Next- 1
(1 2
-2 3
$num3 5
,5 6
$num7 9
)9 :
,: ;
Summary 
= 
	Summaries #
[# $
Random$ *
.* +
Shared+ 1
.1 2
Next2 6
(6 7
	Summaries7 @
.@ A
LengthA G
)G H
]H I
} 
) 
. 
ToArray 
( 
) 
; 
} 	
}   
}!! ë

RE:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\Models\LensViewModel.cs
	namespace 	
Lux_Lens
 
. 
Web 
. 
Models 
{ 
public 

class 
LensViewModel 
{ 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
public 
string 
Modelo 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
string		 
Marca		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public

 
string

 
Color

 
{

 
get

 !
;

! "
set

# &
;

& '
}

( )
public 
string 
Material 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
decimal 
Precio 
{ 
get  #
;# $
set% (
;( )
}* +
public 
int 
Cantidad 
{ 
get !
;! "
set# &
;& '
}( )
} 
} Ä
PE:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\Pages\Error.cshtml.cs
	namespace 	
Lux_Lens
 
. 
Web 
. 
Pages 
{ 
[ 
ResponseCache 
( 
Duration 
= 
$num 
,  
Location! )
=* +!
ResponseCacheLocation, A
.A B
NoneB F
,F G
NoStoreH O
=P Q
trueR V
)V W
]W X
public 

class 

ErrorModel 
: 
	PageModel '
{		 
private

 
readonly

 
ILogger

  
<

  !

ErrorModel

! +
>

+ ,
_logger

- 4
;

4 5
public 

ErrorModel 
( 
ILogger !
<! "

ErrorModel" ,
>, -
logger. 4
)4 5
{ 	
_logger 
= 
logger 
; 
} 	
public 
string 
? 
	RequestId  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
bool 
ShowRequestId !
=>" $
!% &
string& ,
., -
IsNullOrEmpty- :
(: ;
	RequestId; D
)D E
;E F
public 
void 
OnGet 
( 
) 
{ 	
	RequestId 
= 
Activity  
.  !
Current! (
?( )
.) *
Id* ,
??- /
HttpContext0 ;
.; <
TraceIdentifier< K
;K L
} 	
} 
} ž
EE:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\Program.cs
var 
builder 
= 
WebApplication 
. 
CreateBuilder *
(* +
args+ /
)/ 0
;0 1
builder		 
.		 
Services		 
.		 #
AddControllersWithViews		 (
(		( )
)		) *
;		* +
builder

 
.

 
Services

 
.

 
AddHttpClient

 
(

 
)

  
;

  !
builder 
. 
Services 
. 
AddSwaggerGen 
( 
c  
=>! #
{ 
c 
. 

SwaggerDoc 
( 
$str 
, 
new 
OpenApiInfo &
{' (
Title) .
=/ 0
$str1 >
,> ?
Version@ G
=H I
$strJ N
}O P
)P Q
;Q R
} 
) 
; 
var 
app 
= 	
builder
 
. 
Build 
( 
) 
; 
var 
env 
= 	
app
 
. 
Services 
. 

GetService !
<! "
IWebHostEnvironment" 5
>5 6
(6 7
)7 8
;8 9
app 
. 
UseCors 
( 
$str 
) 
; 
if 
( 
env 
. 
IsDevelopment 
( 
) 
) 
{ 
app 
. 

UseSwagger 
( 
) 
; 
app 
. 
UseSwaggerUI 
( 
c 
=> 
{ 
c 	
.	 

SwaggerEndpoint
 
( 
$str 4
,4 5
$str6 A
)A B
;B C
} 
) 
; 
app 
. 
UseExceptionHandler 
( 
$str 0
)0 1
;1 2
} 
else 
{ 
app   
.   
UseExceptionHandler   
(   
$str   $
)  $ %
;  % &
}!! 
app## 
.## 
UseHttpsRedirection## 
(## 
)## 
;## 
app$$ 
.$$ 
UseStaticFiles$$ 
($$ 
)$$ 
;$$ 
app%% 
.%% 

UseRouting%% 
(%% 
)%% 
;%% 
app(( 
.(( 
MapControllerRoute(( 
((( 
name)) 
:)) 	
$str))
 
,)) 
pattern** 
:** 
$str** 0
)**0 1
;**1 2
app,, 
.,, 
MapFallbackToFile,, 
(,, 
$str,, "
),," #
;,,# $
;,,% &
app.. 
... 
Run.. 
(.. 
).. 	
;..	 
þ
ME:\Documentos\GitHub\AppLux-Lens\Lux-Lens.Api\Lux-Lens.Web\WeatherForecast.cs
	namespace 	
Lux_Lens
 
. 
Web 
{ 
public 

class 
WeatherForecast  
{ 
public 
DateTime 
Date 
{ 
get "
;" #
set$ '
;' (
}) *
public 
int 
TemperatureC 
{  !
get" %
;% &
set' *
;* +
}, -
public		 
int		 
TemperatureF		 
=>		  "
$num		# %
+		& '
(		( )
int		) ,
)		, -
(		- .
TemperatureC		. :
/		; <
$num		= C
)		C D
;		D E
public 
string 
? 
Summary 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} 